#----------------------------------------------
PART 1.
+virtualenv environment.
+necessary dependencies:
OpenCV
OpenCV-contrib
SQLite
numpy
pillow

anaconda
frontalface.xml

#----------------------------------------------
PART 2.
+how to write the necessary code implementation for recording and training the face recognition program.
+including three steps:
Create database for storing face recognition.
Record faces to the database.
Train recognizer with the data in the database.

+Create db and using sqlitebrowser
+Record faces:
Haar Feature-based Cascade Classifiers: It is a machine learning based approach where a cascade function is trained from a lot of positive and negative images. It is then used to detect objects in other images.  Initially, the algorithm needs a lot of positive images (images of faces) and negative images (images without faces) to train the classifier. Then we need to extract features from it. 

#-----------------------------------------------
PART 3. TRAINING
+LBPH analyzes each face in the training set separately and independently. The LBPH method is somewhat simpler, in the sense that we characterize each image in the dataset locally; and when a new unknown image is provided, we perform the same analysis on it and compare the result to each of the images in the feature file. We will be using the LBPH Face recognizer for our purpose.
+create_database.py: To create database and table
+record_face.py: To capture face images and record the corresponding name in the database.
+trainer.py: Use of OpenCV’s LBPH Face Recognizer to train the dataset that outputs trainingData.yml file that we’ll be using later in the tutorial for face recognition.

#------------------------------------------------
PART 4. PREDICT

