#----------------------------------------------
PART 1.
+ Virtualenv environment.
+ Necessary dependencies:
OpenCV
OpenCV-contrib
SQLite
numpy
pillow
anaconda
frontalface.xml

#----------------------------------------------
+INCLUDING three steps:
1. Create database for storing face recognition.
2. Record faces to the database using some available models.
3. Train recognizer with the data in the database to create our features for each image which are called a model OR using pre-trained models.
4. Use some algorithm like K-NN with features (model) to predict people. 

#----------------------------------------------
PART 2.
+ How to write the necessary code implementation for recording the face recognition program.
+ Create db and using sqlitebrowser
+ Record faces:
Haar Feature-based Cascade Classifiers: It is a machine learning based approach where a cascade function is trained from a lot of positive and negative images. It is then used to detect objects in other images. Initially, the algorithm needs a lot of positive images (images of faces) and negative images (images without faces) to train the classifier. Then we need to extract features from it. 
+ create_database.py: To create database and table
+ record_face.py: To capture face images and record the corresponding name in the database.

#-----------------------------------------------
PART 3. TRAINING
+ LBPH analyzes each face in the training set separately and independently. The LBPH method is somewhat simpler, in the sense that we characterize each image in the dataset locally; and when a new unknown image is provided, we perform the same analysis on it and compare the result to each of the images in the feature file. We will be using the LBPH Face recognizer for our purpose.
+ trainer.py: Use of OpenCV’s LBPH Face Recognizer to train the dataset that outputs trainingData.yml file that we’ll be using later in the tutorial for face recognition.

#------------------------------------------------
PART 4. PREDICT
+ Use Haar Feature-based Cascade Classifiers to get the face of each person from their images.
+ Use our model to predict name.

#------------------------------------------------
Problem => Solution:
+ Mutiple faces simultaneously. => Algorithm.
+ Wear face mask, smile too much, have some distortion in faces. => Previous requirements.
+ Sinh đôi. => Exception rules.
+ Trick by use image of the wanted person. 3D masks => Add more features.
+ Make-up.
+ Come to class just for inditification purposes.
+ Brightness.

In conclusion, we have two types of problems including managing and processing tricks.

#------------------------------------------------
Summary of solutions:
+ Algorithm.
+ Previous requirements.
+ Exception rules.
+ Add more features.

#------------------------------------------------
Running applications:
+ Viettel.
+ 

